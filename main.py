import os
import datetime
import locale

import telebot
from flask import Flask, request
from sqlalchemy import Column
from sqlalchemy.sql.sqltypes import Boolean
from telebot import TeleBot, types
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv
from datetime import datetime
import pandas as pd
from io import BytesIO
import threading
import time
from telebot.apihelper import ApiTelegramException, session
from flask_migrate import Migrate
import locale
from babel.dates import format_datetime, format_date
from telebot.apihelper import ApiTelegramException


# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env.prod ===
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")


env = os.getenv("FLASK_ENV", "development")
if env == "production":
    db_user = os.getenv("POSTGRES_USER")
    db_password = os.getenv("POSTGRES_PASSWORD")
    db_host = os.getenv("POSTGRES_HOST")
    db_name = os.getenv("POSTGRES_DB")
    db_port = os.getenv("POSTGRES_DB_PORT", "5432")
    DATABASE_URL = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
else:
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///events.db")

print(f"[‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ: {DATABASE_URL}")


PORT = int(os.getenv("PORT", 5000))
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1001234567890"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")


# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
bot = TeleBot(API_TOKEN, threaded=False)
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
migrate = Migrate(app, db)



# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —ñ–≥—Ä–æ—Ç–µ–∫–∏ ===
CURRENT_IMAGE_PATH = "current_event_image.jpg"

# === –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—ñ–π ===
UKR_DAY_ABBR = {
    0: "–ü–Ω",
    1: "–í—Ç",
    2: "–°—Ä",
    3: "–ß—Ç",
    4: "–ü—Ç",
    5: "–°–±",
    6: "–ù–¥",
}


# === –ú–æ–¥–µ–ª—ñ ===
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    telegram_id = db.Column(db.String(50), nullable=False)
    username = db.Column(db.String(100))

class Event(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    date = db.Column(db.DateTime)
    max_players = db.Column(db.Integer)
    message_id = db.Column(db.BigInteger)
    chat_id = db.Column(db.BigInteger)
    description = db.Column(db.Text)
    last_rendered_text = db.Column(db.Text)
    is_simple = Column(Boolean, default=False)

class Registration(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    event_id = db.Column(db.Integer, db.ForeignKey('event.id'))

class EventsOverviewMessage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    message_id = db.Column(db.BigInteger)
    chat_id = db.Column(db.BigInteger)
    last_rendered_text = db.Column(db.Text)

with app.app_context():
    db.create_all()


def format_uk_date(dt, with_time=True):
    if with_time:
        return format_datetime(dt, "EEEE, d MMMM yyyy –æ HH:mm", locale="uk")
    else:
        return format_datetime(dt, "EEEE, d MMMM yyyy", locale="uk")


# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω–∞ ===
def is_admin(chat_id, user_id):
    return str(user_id) in ADMIN_IDS




def periodic_event_update():
#    with app.app_context():
 #       while True:
  #          try:
   #             now = datetime.now()
    #            events = Event.query.filter(Event.date >= now).all()
     #           for event in events:
      #              update_event_message(event)
       #         time.sleep(30)  # –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        #    except Exception as e:
         #       print(f"[‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ü–∏–∫–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è]: {e}")
          #      time.sleep(600)
    pass

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫
#update_thread = threading.Thread(target=periodic_event_update, daemon=True)
#update_thread.start()


# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ñ–≥—Ä–æ—Ç–µ–∫—É(–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π) ===
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


def update_overview_message():
    try:
        overview = EventsOverviewMessage.query.first()
        if not overview:
            print("‚ùó –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–≥—Ä–æ—Ç–µ–∫–æ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
            return


        events = Event.query.order_by(Event.date).all()
        if not events:
            full_text = "üì≠ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π."
        else:
            weekday_map = {0: "–ü–ù", 1: "–í–¢", 2: "–°–†", 3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë", 6: "–ù–î"}
            text_blocks = []

            for event in events:
                regs = Registration.query.filter_by(event_id=event.id).all()
                users = [db.session.get(User, r.user_id) for r in regs]
                usernames = [f"@{u.username}" if u.username else f"ID:{u.telegram_id}" for u in users if u]
                weekday = weekday_map[event.date.weekday()]
                date_str = event.date.strftime("%d.%m")


                block = (
                    f"<b>üóì {weekday}, {date_str} ‚Äì {event.name}</b>\n"
                    f"{event.description.strip()}\n"
                )
                if getattr(event, "is_simple", False) is False:
                    block += f"<b>–ó–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å:</b> {len(usernames)} / {event.max_players}\n"
                    block += f"<b>–ì—Ä–∞–≤—Ü—ñ:</b> " + (", ".join(usernames) if usernames else "‚Äî")
                text_blocks.append(block)

            full_text = "\n\n".join(text_blocks)

        # üß† –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ
        if overview.last_rendered_text == full_text:
            print("‚ÑπÔ∏è –¢–µ–∫—Å—Ç –æ–≥–ª—è–¥—É –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            return

        # üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.edit_message_text(
            full_text,
            chat_id=overview.chat_id,
            message_id=overview.message_id,
            parse_mode="HTML"
        )

        # üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        overview.last_rendered_text = full_text
        db.session.commit()
        print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–¥—ñ—è–º–∏")

    except ApiTelegramException as e:
        if "message is not modified" in str(e):
            print("‚ÑπÔ∏è Telegram: –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        else:
            print(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–≥–ª—è–¥—É –ø–æ–¥—ñ–π: {e}")


def update_event_message(event):
    try:
        if not event.message_id or not event.chat_id:
            print(f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event.name}' –Ω–µ –º–∞—î message_id –∞–±–æ chat_id ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
            return

        registrations = Registration.query.filter_by(event_id=event.id).all()
        players = [db.session.get(User, r.user_id) for r in registrations if db.session.get(User, r.user_id)]

        text = f"üîî –ü–æ–¥—ñ—è: {event.name}\nüïí –î–∞—Ç–∞: {format_uk_date(event.date)}\n"
        text += f"üë• –ì—Ä–∞–≤—Ü—ñ–≤: {len(players)} / {event.max_players}\n"
        if players:
            text += "–ì—Ä–∞–≤—Ü—ñ: " + ", ".join(f"@{p.username}" if p.username else f"ID:{p.telegram_id}" for p in players) + "\n"


        # ‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç –∑–º—ñ–Ω–∏–≤—Å—è
        if event.last_rendered_text == text:
            print(f"‚ÑπÔ∏è '{event.name}': —Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            return

        bot.edit_message_text(
            chat_id=event.chat_id,
            message_id=event.message_id,
            text=text
        )

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç
        event.last_rendered_text = text
        db.session.commit()

        update_overview_message()
        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó '{event.name}' –æ–Ω–æ–≤–ª–µ–Ω–æ")

    except ApiTelegramException as e:
        if "message is not modified" in str(e):
            print(f"‚ÑπÔ∏è '{event.name}': —Ç–µ–∫—Å—Ç —ñ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
        else:
            print(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è '{event.name}': {e}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è '{event.name}': {e}")


def generate_event_buttons(events=None):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î InlineKeyboardMarkup –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É events.
    –Ø–∫—â–æ events is None ‚Äî –¥—ñ—Å—Ç–∞–Ω–µ –≤—Å—ñ –ø–æ–¥—ñ—ó –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –∑ –ë–î.
    (–°—É–º—ñ—Å–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –≤–∏–∫–ª–∏–∫–∞–º–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.)
    """
    if events is None:
        # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–¥—ñ—ó –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é
        events = Event.query.filter_by(is_simple=False).order_by(Event.date).all()

    markup = types.InlineKeyboardMarkup()
    if not events:
        markup.add(types.InlineKeyboardButton("–ü–æ–¥—ñ–π —â–µ –Ω–µ–º–∞—î", callback_data="none"))
        return markup

    for event in events:
        # –ë–µ–∑–ø–µ—á–Ω–∏–π weekday / date label
        weekday_abbr = UKR_DAY_ABBR.get(event.date.weekday(), "")
        date_label = format_date(event.date, format="dd.MM", locale="uk") if event.date else ""
        label = f"{weekday_abbr}, {date_label} | {event.name}"
        markup.add(types.InlineKeyboardButton(label, callback_data=f"toggle_{event.id}"))

    return markup

# === –°—Ç–∞—Ä—Ç ===
@bot.message_handler(commands=['start'])
def start_handler(message):
    telegram_id = str(message.from_user.id)
    username = message.from_user.username or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'
    user = User.query.filter_by(telegram_id=telegram_id).first()
    if not user:
        user = User(telegram_id=telegram_id, username=username)
        db.session.add(user)
        db.session.commit()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=generate_event_buttons())


# === –Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è + —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ===
def handle_registration_logic(call, telegram_id, username, event_id):
    with app.app_context():
        try:
            user = User.query.filter_by(telegram_id=telegram_id).first()
            if not user:
                user = User(telegram_id=telegram_id, username=username)
                db.session.add(user)
            else:
                user.username = username  # –û–Ω–æ–≤–ª—é—î–º–æ username
            db.session.commit()

            registration = Registration.query.filter_by(user_id=user.id, event_id=event_id).first()
            event = db.session.get(Event, event_id)

            if not event or not event.message_id:
                print(f"‚ö†Ô∏è –ü–æ–¥—ñ—è –∑ id={event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –º–∞—î message_id.")
                return

            if registration:
                db.session.delete(registration)
                db.session.commit()
                update_event_message(event)
            else:
                current_players = Registration.query.filter_by(event_id=event_id).count()
                if current_players >= event.max_players:
                    bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –≤—Å—ñ –º—ñ—Å—Ü—è –∑–∞–π–Ω—è—Ç—ñ.")
                    return
                reg = Registration(user_id=user.id, event_id=event_id)
                db.session.add(reg)
                db.session.commit()
                update_event_message(event)

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_registration_logic: {e}")



@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_"))
def handle_toggle_registration(call):
    telegram_id = str(call.from_user.id)
    username = call.from_user.username or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'
    event_id = int(call.data.split("_")[1])

    with app.app_context():
        user = User.query.filter_by(telegram_id=telegram_id).first()
        if not user:
            user = User(telegram_id=telegram_id, username=username)
            db.session.add(user)
            db.session.commit()
        else:
            if user.username != username:
                user.username = username
                db.session.commit()

        registration = Registration.query.filter_by(user_id=user.id, event_id=event_id).first()
        event = db.session.get(Event, event_id)
        if not event:
            bot.answer_callback_query(call.id, text="‚ùå –ü–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        if registration:
            db.session.delete(registration)
            db.session.commit()
            bot.answer_callback_query(call.id, text=f"‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ '{event.name}'.")
        else:
            current_players = Registration.query.filter_by(event_id=event_id).count()
            if current_players >= event.max_players:
                bot.answer_callback_query(call.id, text="‚ö†Ô∏è –í—Å—ñ –º—ñ—Å—Ü—è –∑–∞–π–Ω—è—Ç—ñ.", show_alert=True)
                return
            reg = Registration(user_id=user.id, event_id=event_id)
            db.session.add(reg)
            db.session.commit()
            bot.answer_callback_query(call.id, text=f"‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –Ω–∞ '{event.name}'.")

        # üîÅ –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –±—É–¥—å-—è–∫–æ—ó –∑–º—ñ–Ω–∏
        update_event_message(event)
        update_overview_message()




# === –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    bot.send_message(message.chat.id, """üìã –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:
/create_event - –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≥—Ä–æ—Ç–µ–∫—É
/delete_event - –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–≥—Ä–æ—Ç–µ–∫—É
/edit_event - –ó–º—ñ–Ω–∏—Ç–∏ —ñ–≥—Ä–æ—Ç–µ–∫—É
/list_event - –õ—é–¥–∏, –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —ñ–≥—Ä–æ—Ç–µ–∫—É
/export_event - –õ—é–¥–∏, –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —ñ–≥—Ä–æ—Ç–µ–∫—É —É —Ñ–∞–π–ª—ñ
/events ‚Äî –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —ñ–≥—Ä–æ—Ç–µ–∫
/delete_all - –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ–≥—Ä–æ—Ç–µ–∫–∏
/set_event_image - –ü—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ —É –ø—Ä–∏–º—ñ—Ç–∫–∞—Ö —Ü—é –∫–æ–º–∞–Ω–¥—É
/add_admin - –î–∞—Ç–∏ –∞–¥–º—ñ–Ω–∫—É
/remove_admin - –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∫—É
/add_event - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é –±–µ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó(D&D)
""")


def update_admin_ids_env(new_ids):
    env_path = ".env.prod"
    lines = []
    found = False
    new_line = f"ADMIN_IDS={','.join(new_ids)}"
    with open(env_path, "r") as f:
        for line in f:
            if line.startswith("ADMIN_IDS="):
                lines.append(new_line + "\n")
                found = True
            else:
                lines.append(line)
    if not found:
        lines.append(new_line + "\n")
    with open(env_path, "w") as f:
        f.writelines(lines)


@bot.message_handler(commands=['add_admin'])
def add_admin_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    telegram_id = str(message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id)
    username = message.reply_to_message.from_user.username if message.reply_to_message else message.from_user.username

    if telegram_id in ADMIN_IDS:
        bot.reply_to(message, f"‚ÑπÔ∏è @{username} –≤–∂–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    ADMIN_IDS.append(telegram_id)
    update_admin_ids_env(ADMIN_IDS)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    if not User.query.filter_by(telegram_id=telegram_id).first():
        user = User(username=username, telegram_id=telegram_id)
        db.session.add(user)
        db.session.commit()

    bot.reply_to(message, f"‚úÖ @{username} –¥–æ–¥–∞–Ω–æ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

@bot.message_handler(commands=['remove_admin'])
def remove_admin_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /remove_admin username (–±–µ–∑ @)")
        return

    username_to_remove = args[1].lstrip("@").strip()
    user = User.query.filter_by(username=username_to_remove).first()

    if not user:
        bot.reply_to(message, f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username_to_remove} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ.")
        return

    telegram_id = str(user.telegram_id)
    if telegram_id not in ADMIN_IDS:
        bot.reply_to(message, f"‚ÑπÔ∏è @{username_to_remove} –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    ADMIN_IDS.remove(telegram_id)
    update_admin_ids_env(ADMIN_IDS)
    bot.reply_to(message, f"‚úÖ @{username_to_remove} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if not is_admin(message.chat.id, message.from_user.id):
        return  # —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –≤—ñ–¥ –Ω–µ–∞–¥–º—ñ–Ω—ñ–≤

    if message.caption and message.caption.strip().startswith("/set_event_image"):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—é –∑–¥–∞—Ç–Ω—ñ—Å—Ç—é
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open(CURRENT_IMAGE_PATH, 'wb') as f:
            f.write(downloaded_file)

        bot.reply_to(message, "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –∞–Ω–æ–Ω—Å—ñ–≤.")

#locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')
#locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')


@bot.message_handler(commands=['create_event'])
def create_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return

    try:
        content = message.text[len('/create_event'):].strip()
        parts = [p.strip() for p in content.split("|")]
        if len(parts) < 4:
            bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /create_event –ù–∞–∑–≤–∞ | –î–∞—Ç–∞ | –ú–∞–∫—Å–ì—Ä–∞–≤—Ü—ñ–≤ | –û–ø–∏—Å")
            return

        name, date_str, max_players_str, description = parts[:4]

        try:
            event_date = datetime.strptime(date_str, "%d.%m")
            event_date = event_date.replace(year=datetime.now().year)
        except ValueError:
            bot.reply_to(message, "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM")
            return

        #if event_date < datetime.now():
         #   bot.reply_to(message, "‚ö†Ô∏è –î–∞—Ç–∞ –≤–∂–µ –º–∏–Ω—É–ª–∞.")
          #  return

        try:
            max_players = int(max_players_str)
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
            return

        event = Event(
            name=name,
            date=event_date,
            max_players=max_players,
            description=description,
            is_simple=False
        )
        db.session.add(event)
        db.session.commit()

        # ‚ùóÔ∏è –¢–£–¢ –ì–û–õ–û–í–ù–ï: –ø—É–±–ª—ñ–∫—É—î–º–æ –≤ —Ç–æ–º—É –∂ —á–∞—Ç—ñ, –¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ–≤–µ–Ω—Ç (–æ—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç)
        publish_event_message(event, chat_id=message.chat.id)

        bot.send_chat_action(message.chat.id, "typing")
        time.sleep(0.3)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, "‚úÖ –Ü–≤–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ.", disable_notification=True)

    except Exception as e:
        print(f"[ERROR /create_event]: {e}")
        bot.reply_to(message, "üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó.")


@bot.message_handler(commands=['add_event'])
def add_simple_event(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return

    try:
        parts = message.text[len("/add_event"):].strip().split("|")
        if len(parts) < 3:
            bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /add_event –ù–∞–∑–≤–∞ | –î–∞—Ç–∞ | –û–ø–∏—Å")
            return

        name = parts[0].strip()
        date_str = parts[1].strip()
        description = parts[2].strip()

        try:
            event_date = datetime.strptime(date_str, "%d.%m")
            event_date = event_date.replace(year=datetime.now().year)
        except ValueError:
            bot.reply_to(message, "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç—É –ø–æ–¥—ñ—é
        new_event = Event(
            name=name,
            date=event_date,
            description=description,
            is_simple=True
        )
        db.session.add(new_event)
        db.session.commit()

        # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ –≥—Ä—É–ø—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        text = f"üìÖ {event_date.strftime('%d.%m.%Y')}\n<b>{name}</b>\n\n{description}"

        bot.reply_to(message, "‚úÖ –ü–æ–¥—ñ—è –¥–æ–¥–∞–Ω–∞ —è–∫ –ø—Ä–æ—Å—Ç–∞ (–±–µ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó).")

    except Exception as e:
        bot.reply_to(message, f"üö´ –ü–æ–º–∏–ª–∫–∞: {e}")



def publish_event_message(event, chat_id=GROUP_CHAT_ID):
    try:
        # –Ø–∫—â–æ –ø–æ–¥—ñ—è –ø—Ä–æ—Å—Ç–∞ ‚Äî –±–µ–∑ –±–ª–æ–∫—É "–ì—Ä–∞–≤—Ü—ñ–≤" —ñ –∫–Ω–æ–ø–æ–∫
        if getattr(event, "is_simple", False):
            text = (
                f"üîî –ü–æ–¥—ñ—è: {event.name}\n"
                f"üïí –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"{event.description}"
            )
            markup = None
        else:
            text = (
                f"üîî –ü–æ–¥—ñ—è: {event.name}\n"
                f"üïí –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë• –ì—Ä–∞–≤—Ü—ñ–≤: 0 / {event.max_players}\n"
                f"{event.description}"
            )
            markup = InlineKeyboardMarkup()


        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

        event.message_id = msg.message_id
        event.chat_id = msg.chat.id
        event.last_rendered_text = text
        db.session.commit()

        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—é '{event.name}' –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è '{event.name}': {e}")



@bot.message_handler(commands=['delete_event'])
def delete_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return

    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /delete_event –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó")
        return

    event_name = args[1].strip()
    event = Event.query.filter_by(name=event_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    Registration.query.filter_by(event_id=event.id).delete()
    db.session.delete(event)
    db.session.commit()
    bot.send_message(message.chat.id, f"üóë –ü–æ–¥—ñ—é '{event_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É—Å—ñ–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è–º–∏.")

@bot.message_handler(commands=['delete_all'])
def delete_all_events_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    Registration.query.delete()
    Event.query.delete()
    db.session.commit()
    bot.send_message(message.chat.id, "üóë –£—Å—ñ –ø–æ–¥—ñ—ó —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –±—É–ª–æ –æ—á–∏—â–µ–Ω–æ.")


@bot.message_handler(commands=['edit_event'])
def edit_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return

    args = message.text.split(' ', 1)
    if len(args) < 2 or "|" not in args[1]:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /edit_event –°—Ç–∞—Ä–∞–ù–∞–∑–≤–∞ | –ù–æ–≤–∞–ù–∞–∑–≤–∞")
        return

    old_name, new_name = map(str.strip, args[1].split("|", 1))
    event = Event.query.filter_by(name=old_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{old_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    event.name = new_name
    db.session.commit()
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥—ñ—é –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: '{old_name}' ‚ûù '{new_name}'")
import time
from telebot.apihelper import ApiTelegramException

@bot.message_handler(commands=['events'])
def send_events_to_group(message):
    # –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    if not is_admin(message.chat.id, message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return

    events = Event.query.order_by(Event.date).all()
    if not events:
        bot.send_message(message.chat.id, "üì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.")
        return

    intro_text = (
        "–ê–Ω—É –¥–æ –Ω–∞—Å –Ω–∞ —ñ–≥—Ä–æ—Ç–µ–∫—É! üé≤\n"
        "–ù–µ–º–∞—î –∫–æ–º–ø–∞–Ω—ñ—ó? –ó–Ω–∞–π–¥–µ–º–æ! \n"
        "–ù–∞–≤—á–∏–º–æ –ø—Ä–∞–≤–∏–ª–∞–º ‚Äî –ø—Ä–∏–≥–æ—Å—Ç–∏–º–æ –∫–∞–≤–æ—é‚òïÔ∏è\n"
        "–ü–æ—á–∞—Ç–æ–∫ –æ 18:00 \n"
        "üìç –ê–¥—Ä–µ—Å–∞: –≤—É–ª. –õ–∏—Å—Ç–æ–ø–∞–¥–æ–≤–æ–≥–æ –ß–∏–Ω—É, 3\n\n"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫—â–æ —î)
    if os.path.exists(CURRENT_IMAGE_PATH):
        try:
            with open(CURRENT_IMAGE_PATH, "rb") as photo:
                bot.send_photo(message.chat.id, photo, caption=intro_text)
                time.sleep(1)
        except ApiTelegramException as e:
            handle_too_many_requests(e)

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–¥—ñ–π
    weekday_map = {0: "–ü–ù", 1: "–í–¢", 2: "–°–†", 3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë", 6: "–ù–î"}
    text_blocks = []
    events_for_buttons = []  # —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –º–∞—é—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é

    for event in events:
        weekday = weekday_map.get(event.date.weekday(), "")
        date_str = format_date(event.date, format="dd.MM", locale="uk") if event.date else ""

        if getattr(event, "is_simple", False):
            block = (
                f"üìÖ {weekday}, {date_str} ‚Äì {event.name}\n"
                f"{(event.description or '').strip()}"
            )
        else:
            regs = Registration.query.filter_by(event_id=event.id).all()
            users = [db.session.get(User, r.user_id) for r in regs]
            usernames = [f"@{u.username}" if u and u.username else f"ID:{u.telegram_id}" for u in users if u]

            players_text = ", ".join(usernames) if usernames else "–ø–æ–∫–∏ –Ω—ñ—Ö—Ç–æ"
            block = (
                f"üìÖ {weekday}, {date_str} ‚Äì {event.name}\n"
                f"{(event.description or '').strip()}\n"
                f"–ì—Ä–∞–≤—Ü—ñ: {players_text}"
            )
            events_for_buttons.append(event)

        text_blocks.append(block)

    full_text = "\n\n".join(text_blocks)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–ø–∏—Å –ø–æ–¥—ñ–π
    try:
        desc_msg = bot.send_message(message.chat.id, full_text, parse_mode="HTML")
        time.sleep(1)
    except ApiTelegramException as e:
        handle_too_many_requests(e)
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ overview —É –ë–î
    overview = EventsOverviewMessage.query.first()
    if not overview:
        overview = EventsOverviewMessage(
            chat_id=desc_msg.chat.id,
            message_id=desc_msg.message_id,
            last_rendered_text=full_text
        )
        db.session.add(overview)
    else:
        overview.chat_id = desc_msg.chat.id
        overview.message_id = desc_msg.message_id
        overview.last_rendered_text = full_text
    db.session.commit()

    # –ö–Ω–æ–ø–∫–∏ ‚Äî —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø–æ–¥—ñ—ó –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é
    if events_for_buttons:
        markup = generate_event_buttons(events_for_buttons)
        try:
            bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=markup)
            time.sleep(1)
        except ApiTelegramException as e:
            handle_too_many_requests(e)



def handle_too_many_requests(e):
    if e.result.status_code == 429:
        retry_after = e.result_json.get("parameters", {}).get("retry_after", 5)
        print(f"[Rate Limit] Too Many Requests. Waiting for {retry_after} seconds...")
        time.sleep(retry_after)
    else:
        raise e


@bot.message_handler(commands=['list_event'])
def list_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /list_event –ù–∞–∑–≤–∞–ü–æ–¥—ñ—ó")
        return
    event_name = args[1].strip()
    event = Event.query.filter_by(name=event_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    registrations = Registration.query.filter_by(event_id=event.id).all()
    if not registrations:
        bot.reply_to(message, f"üë• –ù—ñ—Ö—Ç–æ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ '{event.name}'.")
        return
    usernames = []
    for reg in registrations:
        user = db.session.get(User, reg.user_id)
        if user:
            usernames.append(f"@{user.username}" if user.username else f"ID:{user.telegram_id}")
    reply = f"üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ '{event.name}':\n" + ", ".join(usernames)

    bot.send_message(message.chat.id, reply)


@bot.message_handler(commands=['export_event'])
def export_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /export_event –ù–∞–∑–≤–∞–ü–æ–¥—ñ—ó")
        return
    event_name = args[1].strip()
    event = Event.query.filter_by(name=event_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    registrations = Registration.query.filter_by(event_id=event.id).all()
    data = []
    for reg in registrations:
        user = db.session.get(User, reg.user_id)
        if user:
            data.append({
                "Telegram ID": user.telegram_id,
                "Username": user.username or "",
            })
    if not data:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –Ω–∞ '{event.name}'")
        return
    df = pd.DataFrame(data)
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    bot.send_document(message.chat.id, output, visible_file_name=f"{event.name}.xlsx")


# === –í–µ–±—Ö—É–∫–∏ ===

@app.route('/', methods=['POST'])
def webhook_root():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '', 200

@app.route('/ping')
def ping():
    return "‚úÖ I'm alive", 200


@app.route('/')
def index():
    return '‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!'


# === –ó–∞–ø—É—Å–∫ —ñ–∑ –≤–µ–±—Ö—É–∫–æ–º ===
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
#if __name__ == "__main__":
 #   print("[‚úÖ] –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ polling")
  #  bot.remove_webhook()
   # bot.infinity_polling()

