import os
import datetime
import locale
from flask import Flask, request
from telebot import TeleBot, types
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv
from datetime import datetime
import pandas as pd
from io import BytesIO
import threading
import time
from telebot.apihelper import ApiTelegramException


# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env ===
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///events.db")
PORT = int(os.getenv("PORT", 5000))
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-1001234567890"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")


# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
bot = TeleBot(API_TOKEN, threaded=False)
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)


# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —ñ–≥—Ä–æ—Ç–µ–∫–∏ ===
CURRENT_IMAGE_PATH = "current_event_image.jpg"

# === –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—ñ–π ===
UKR_DAY_ABBR = {
    0: "–ü–Ω",
    1: "–í—Ç",
    2: "–°—Ä",
    3: "–ß—Ç",
    4: "–ü—Ç",
    5: "–°–±",
    6: "–ù–¥",
}

# === –ú–æ–¥–µ–ª—ñ ===
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    telegram_id = db.Column(db.String(50), nullable=False)
    username = db.Column(db.String(100))

class Event(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    date = db.Column(db.DateTime)
    max_players = db.Column(db.Integer)
    message_id = db.Column(db.BigInteger)
    chat_id = db.Column(db.BigInteger)
    description = db.Column(db.Text)

class Registration(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    event_id = db.Column(db.Integer, db.ForeignKey('event.id'))

class EventsOverviewMessage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    message_id = db.Column(db.BigInteger)
    chat_id = db.Column(db.BigInteger)

with app.app_context():
    db.create_all()

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω–∞ ===
def is_admin(chat_id, user_id):
    return str(user_id) in ADMIN_IDS



def periodic_event_update():
    with app.app_context():
        while True:
            try:
                now = datetime.now()
                events = Event.query.filter(Event.date >= now).all()
                for event in events:
                    update_event_message(event)
                time.sleep(30)  # –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                print(f"[‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ü–∏–∫–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è]: {e}")
                time.sleep(60)


# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫
update_thread = threading.Thread(target=periodic_event_update, daemon=True)
update_thread.start()


# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ñ–≥—Ä–æ—Ç–µ–∫—É(–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π) ===
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


def update_overview_message():
    try:
        overview = EventsOverviewMessage.query.first()
        if not overview:
            print("‚ùó –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–≥—Ä–æ—Ç–µ–∫–æ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
            return

        events = Event.query.filter(Event.date >= datetime.now()).order_by(Event.date).all()
        if not events:
            bot.edit_message_text("üì≠ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.", chat_id=overview.chat_id, message_id=overview.message_id)
            return

        weekday_map = {0: "–ü–ù", 1: "–í–¢", 2: "–°–†", 3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë", 6: "–ù–î"}
        text_blocks = []

        for event in events:
            regs = Registration.query.filter_by(event_id=event.id).all()
            users = [db.session.get(User, r.user_id) for r in regs]
            usernames = [f"@{u.username}" if u.username else f"ID:{u.telegram_id}" for u in users if u]
            weekday = weekday_map[event.date.weekday()]
            date_str = event.date.strftime("%d.%m")

            block = (
                f"<b>üóì {weekday}, {date_str} ‚Äì {event.name}</b>\n"
                f"üë• 2‚Äì{event.max_players} –≥—Ä–∞–≤—Ü—ñ–≤\n"
                f"‚≠êÔ∏è –î–ª—è –≤—Å—ñ—Ö –±–∞–∂–∞—é—á–∏—Ö\n"
                f"<b>–ó–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å:</b> {len(usernames)} / {event.max_players}\n"
                f"<b>–ì—Ä–∞–≤—Ü—ñ:</b>\n" + ("\n".join(usernames) if usernames else "‚Äî")
            )
            text_blocks.append(block)

        full_text = "\n\n".join(text_blocks)
        bot.edit_message_text(full_text, chat_id=overview.chat_id, message_id=overview.message_id, parse_mode="HTML")
        print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–¥—ñ—è–º–∏")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–≥–ª—è–¥—É –ø–æ–¥—ñ–π: {e}")


def update_event_message(event):
    try:
        registrations = Registration.query.filter_by(event_id=event.id).all()
        players = [db.session.get(User, r.user_id) for r in registrations if db.session.get(User, r.user_id)]

        text = f"üîî –ü–æ–¥—ñ—è: {event.name}\nüïí –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üë• –ì—Ä–∞–≤—Ü—ñ–≤: {len(players)} / {event.max_players}\n"
        if players:
            text += "–ì—Ä–∞–≤—Ü—ñ: " + ", ".join(f"@{p.username}" if p.username else f"ID:{p.telegram_id}" for p in players) + "\n"

        reply_markup = InlineKeyboardMarkup()
        reply_markup.add(
            InlineKeyboardButton("‚úÖ –Ø –π–¥—É", callback_data=f"join_{event.id}"),
            InlineKeyboardButton("‚ùå –ù–µ –π–¥—É", callback_data=f"leave_{event.id}")
        )

        bot.edit_message_text(
            chat_id=event.chat_id,
            message_id=event.message_id,
            text=text,
            reply_markup=reply_markup
        )

        update_overview_message()
        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó '{event.name}' –æ–Ω–æ–≤–ª–µ–Ω–æ")

    except ApiTelegramException as e:
        if "message is not modified" in str(e):
            print(f"‚ÑπÔ∏è '{event.name}': —Ç–µ–∫—Å—Ç —ñ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
        else:
            print(f"‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API –¥–ª—è '{event.name}': {e}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è '{event.name}': {e}")



def generate_event_buttons():
    markup = types.InlineKeyboardMarkup()
    events = Event.query.filter(Event.date >= datetime.now()).order_by(Event.date).all()
    if not events:
        markup.add(types.InlineKeyboardButton("–ü–æ–¥—ñ–π —â–µ –Ω–µ–º–∞—î", callback_data="none"))
    else:
        for event in events:
            weekday_abbr = UKR_DAY_ABBR[event.date.weekday()]
            date_label = event.date.strftime("%d.%m")
            label = f"{weekday_abbr}, {date_label} | {event.name}"
            markup.add(types.InlineKeyboardButton(label, callback_data=f"toggle_{event.id}"))
    return markup

# === –°—Ç–∞—Ä—Ç ===
@bot.message_handler(commands=['start'])
def start_handler(message):
    telegram_id = str(message.from_user.id)
    username = message.from_user.username or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'
    user = User.query.filter_by(telegram_id=telegram_id).first()
    if not user:
        user = User(telegram_id=telegram_id, username=username)
        db.session.add(user)
        db.session.commit()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=generate_event_buttons())


# === –Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è + —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_"))
def handle_toggle_registration(call):
    telegram_id = str(call.from_user.id)
    username = call.from_user.username or '–ë–µ–∑ —ñ–º–µ–Ω—ñ'
    event_id = int(call.data.split("_")[1])

    with app.app_context():
        try:
            user = User.query.filter_by(telegram_id=telegram_id).first()
            if not user:
                user = User(telegram_id=telegram_id, username=username)
                db.session.add(user)
            else:
                user.username = username  # –û–Ω–æ–≤–ª—é—î–º–æ username

            db.session.commit()

            registration = Registration.query.filter_by(user_id=user.id, event_id=event_id).first()
            event = db.session.get(Event, event_id)

            if registration:
                db.session.delete(registration)
                db.session.commit()
                update_event_message(event)
                bot.answer_callback_query(call.id, "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –º—ñ—Å—Ü—è
                current_players = Registration.query.filter_by(event_id=event_id).count()
                if current_players >= event.max_players:
                    bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, –≤—Å—ñ –º—ñ—Å—Ü—è –∑–∞–π–Ω—è—Ç—ñ.")
                    return

                reg = Registration(user_id=user.id, event_id=event_id)
                db.session.add(reg)
                db.session.commit()
                update_event_message(event)
                bot.answer_callback_query(call.id, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_toggle_registration: {e}")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")



# === –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    bot.send_message(message.chat.id, """üìã –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:
/create_event - –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≥—Ä–æ—Ç–µ–∫—É
/delete_event - –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–≥—Ä–æ—Ç–µ–∫—É
/edit_event - –ó–º—ñ–Ω–∏—Ç–∏ —ñ–≥—Ä–æ—Ç–µ–∫—É
/list_event - –õ—é–¥–∏, –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —ñ–≥—Ä–æ—Ç–µ–∫—É
/export_event - –õ—é–¥–∏, –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —ñ–≥—Ä–æ—Ç–µ–∫—É —É —Ñ–∞–π–ª—ñ
/events ‚Äî –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —ñ–≥—Ä–æ—Ç–µ–∫
/delete_all - –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ–≥—Ä–æ—Ç–µ–∫–∏
/set_event_image - –ü—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ —É –ø—Ä–∏–º—ñ—Ç–∫–∞—Ö —Ü—é –∫–æ–º–∞–Ω–¥—É
""")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if not is_admin(message.chat.id, message.from_user.id):
        return  # —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –≤—ñ–¥ –Ω–µ–∞–¥–º—ñ–Ω—ñ–≤

    if message.caption and message.caption.strip().startswith("/set_event_image"):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—é –∑–¥–∞—Ç–Ω—ñ—Å—Ç—é
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open(CURRENT_IMAGE_PATH, 'wb') as f:
            f.write(downloaded_file)

        bot.reply_to(message, "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –∞–Ω–æ–Ω—Å—ñ–≤.")

locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')
locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')


@bot.message_handler(commands=['create_event'])
def create_event_handler(message):
    try:
        if not is_admin(message.chat.id, message.from_user.id):
            bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
            return
        text = message.text[len('/create_event'):].strip()
        if "|" not in text:
            bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /create_event –ù–∞–∑–≤–∞ | –î–∞—Ç–∞ | –ú–∞–∫—Å–ì—Ä–∞–≤—Ü—ñ–≤ | –û–ø–∏—Å")
            return
        parts = [p.strip() for p in text.split("|")]
        if len(parts) < 4:
            bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /create_event –ù–∞–∑–≤–∞ | –î–∞—Ç–∞ | –ú–∞–∫—Å–ì—Ä–∞–≤—Ü—ñ–≤ | –û–ø–∏—Å")
            return
        name, date_str, max_players_str, description = parts[:4]
        try:
            event_date = datetime.strptime(date_str, "%d.%m")
            event_date = event_date.replace(year=datetime.now().year)
        except ValueError:
            bot.reply_to(message, "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM")
            return
        try:
            max_players = int(max_players_str)
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–¥—ñ—é
        event = Event(name=name, date=event_date, max_players=max_players, description=description)
        db.session.add(event)
        db.session.commit()
        bot.reply_to(message, "‚úÖ –ü–æ–¥—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –©–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚Äî —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è /events")

    except Exception as e:
        print(f"[ERROR /create_event]: {e}")
        bot.reply_to(message, "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó.")


@bot.message_handler(commands=['delete_event'])
def delete_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /delete_event –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó")
        return
    event_name = args[1].strip()
    event = Event.query.filter_by(name=event_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    Registration.query.filter_by(event_id=event.id).delete()
    db.session.delete(event)
    db.session.commit()
    bot.send_message(message.chat.id, f"üóë –ü–æ–¥—ñ—é '{event_name}' –≤–∏–¥–∞–ª–µ–Ω–æ —Ä–∞–∑–æ–º —ñ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è–º–∏.")

@bot.message_handler(commands=['delete_all'])
def delete_all_events_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    Registration.query.delete()
    Event.query.delete()
    db.session.commit()
    bot.send_message(message.chat.id, "üóë –£—Å—ñ –ø–æ–¥—ñ—ó —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")


@bot.message_handler(commands=['edit_event'])
def edit_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    args = message.text.split(' ', 1)
    if len(args) < 2 or "|" not in args[1]:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /edit_event –°—Ç–∞—Ä–∞–ù–∞–∑–≤–∞ | –ù–æ–≤–∞–ù–∞–∑–≤–∞")
        return
    old_name, new_name = map(str.strip, args[1].split("|", 1))
    event = Event.query.filter_by(name=old_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{old_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    event.name = new_name
    db.session.commit()
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥—ñ—é –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: '{old_name}' ‚ûù '{new_name}'")


@bot.message_handler(commands=['events'])
def send_events_to_group(message):

    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    events = Event.query.filter(Event.date >= datetime.now()).order_by(Event.date).all()
    if not events:
        bot.send_message(message.chat.id, "üì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.")
        return
    if os.path.exists(CURRENT_IMAGE_PATH):
        try:
            with open(CURRENT_IMAGE_PATH, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption="üß© –Ü–≥—Ä–æ—Ç–µ–∫–∞ ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –ø–æ–¥—ñ—é!")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")
    text_blocks = []
    weekday_map = {0: "–ü–ù", 1: "–í–¢", 2: "–°–†", 3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë", 6: "–ù–î"}
    for event in events:
        regs = Registration.query.filter_by(event_id=event.id).all()
        users = [db.session.get(User, r.user_id) for r in regs]
        usernames = [f"@{u.username}" if u.username else f"ID:{u.telegram_id}" for u in users if u]
        weekday = weekday_map[event.date.weekday()]
        date_str = event.date.strftime("%d.%m")
        block = (
            f"<b>üóì {weekday}, {date_str} ‚Äì {event.name}</b>\n"
            f"üë• 2‚Äì{event.max_players} –≥—Ä–∞–≤—Ü—ñ–≤\n"
            f"‚≠êÔ∏è –î–ª—è –≤—Å—ñ—Ö –±–∞–∂–∞—é—á–∏—Ö\n"
            f"<b>–ó–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å:</b> {len(usernames)} / {event.max_players}\n"
            f"<b>–ì—Ä–∞–≤—Ü—ñ:</b>\n" + ("\n".join(usernames) if usernames else "‚Äî")
        )
        text_blocks.append(block)
    try:
        full_text = "\n\n".join(text_blocks)
        EventsOverviewMessage.query.delete()
        db.session.commit()
        sent = bot.send_message(message.chat.id, full_text, parse_mode="HTML")
        overview = EventsOverviewMessage(message_id=sent.message_id, chat_id=message.chat.id)
        db.session.add(overview)
        db.session.commit()
        bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=generate_event_buttons())
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–¥—ñ–π: {e}")


@bot.message_handler(commands=['list_event'])
def list_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /list_event –ù–∞–∑–≤–∞–ü–æ–¥—ñ—ó")
        return
    event_name = args[1].strip()
    event = Event.query.filter_by(name=event_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    registrations = Registration.query.filter_by(event_id=event.id).all()
    if not registrations:
        bot.reply_to(message, f"üë• –ù—ñ—Ö—Ç–æ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ '{event.name}'.")
        return
    usernames = []
    for reg in registrations:
        user = db.session.get(User, reg.user_id)
        if user:
            usernames.append(f"@{user.username}" if user.username else f"ID:{user.telegram_id}")
    reply = f"üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ '{event.name}':\n" + "\n".join(usernames)
    bot.send_message(message.chat.id, reply)


@bot.message_handler(commands=['export_event'])
def export_event_handler(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "‚ùå –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    args = message.text.split(' ', 1)
    if len(args) < 2:
        bot.reply_to(message, "üìå –§–æ—Ä–º–∞—Ç: /export_event –ù–∞–∑–≤–∞–ü–æ–¥—ñ—ó")
        return
    event_name = args[1].strip()
    event = Event.query.filter_by(name=event_name).first()
    if not event:
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–¥—ñ—è '{event_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    registrations = Registration.query.filter_by(event_id=event.id).all()
    data = []
    for reg in registrations:
        user = db.session.get(User, reg.user_id)
        if user:
            data.append({
                "Telegram ID": user.telegram_id,
                "Username": user.username or "",
            })
    if not data:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –Ω–∞ '{event.name}'")
        return
    df = pd.DataFrame(data)
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    bot.send_document(message.chat.id, output, visible_file_name=f"{event.name}.xlsx")


# === –í–µ–±—Ö—É–∫–∏ ===
@app.route(f'/{API_TOKEN}', methods=['POST'])
def webhook():
    update = types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route('/')
def index():
    return '‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!'


# === –ó–∞–ø—É—Å–∫ —ñ–∑ –≤–µ–±—Ö—É–∫–æ–º ===
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")
    app.run(host="0.0.0.0", port=PORT, threaded=True)
